## 属性初始化器的速记法
在ES5及更早版本中，对象字面量是“键/值对”的简单集合。这意味着在属性值被初始化时可能会有些重复，例如：
````javascript
    function createPerson(name, age) {
        return {
            name: name,
            age: age
        };
    }
````
在ES6中，你可以使用属性初始化器的速记法来消除对象名称与本地变量的重复情况。当对象的一个属性名称与本地变量名相同时，你可以简单书写名称而省略冒号与值。例如：
````ecmascript 6
    function createPerson(name, age) {
        return {
            name,
            age
        };
    }
    /* 当对象字面量中的属性只有名称时， JS 引擎会在周边作用域查找同名变量。若找到，该变量
       的值将会被赋给对象字面量的同名属性。 */
````

## Object 新方法
* Object.is() 方法

ES6引入了Object.is()方法来弥补严格相等运算符残留的怪异点。此方法接受两个参数，并会在二者的值相等时返回 true ，
此时要求二者类型相同并且值也相等。这有个例子：
````ecmascript 6
   console.log(+0 == -0); // true
   console.log(+0 === -0); // true
   console.log(Object.is(+0, -0)); // false
   console.log(NaN == NaN); // false
   console.log(NaN === NaN); // false
   console.log(Object.is(NaN, NaN)); // true
   console.log(5 == 5); // true
   console.log(5 == "5"); // true
   console.log(5 === 5); // true
   console.log(5 === "5"); // false
   console.log(Object.is(5, 5)); // true
   console.log(Object.is(5, "5")); // false
````

* Object.assign() 方法

## 修改对象的原型

ES6通过添加Object.setPrototypeOf()方法而改变了这种假定，此方法允许你修改任意指定对象的原型。它接受两个参数：需要被修改原型的对象，
以及将会成为前者原型的对象。
````ecmascript 6
   let person = {
       getGreeting() {
           return "Hello";
       }
   };
   let dog = {
       getGreeting() {
           return "Woof";
       }
   };
   
   // 原型为 person
   let friend = Object.create(person);
   console.log(friend.getGreeting()); // "Hello"
   console.log(Object.getPrototypeOf(friend) === person); // true
   
   // 将原型设置为 dog
   Object.setPrototypeOf(friend, dog);
   console.log(friend.getGreeting()); // "Woof"
   console.log(Object.getPrototypeOf(friend) === dog); // true
````